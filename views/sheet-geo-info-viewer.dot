---
layout: master.dot
title: sheet geo information viewer
---
 
[[##body:
    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize-button" style="display: none;">Authorize</button>
    <button id="signout-button" style="display: none;">Sign Out</button>
	<style>
	#map {
	    height: 100%;
	}
	html, body {
		height: 100%;
		margin: 0;
		padding: 0;
	}
	</style>
	<div id="map"></div>
    <pre id="content"></pre>

    <script type="text/javascript">
	  var model = [[= JSON.stringify(model) ]];
	 
      // Client ID and API key from the Developer Console
      var CLIENT_ID = model.sheetClientID;
      var API_KEY = model.sheetAPIKey;

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://sheets.googleapis.com/$discovery/rest?version=v4"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/spreadsheets.readonly";

      var authorizeButton = document.getElementById('authorize-button');
      var signoutButton = document.getElementById('signout-button');

	  var mapIsReady = false;
	  var sheetIsReady = false;
	  var googleMap = null;
	  var geoPoints = null;

	  function initMap() {
        // Create a map object and specify the DOM element for display.
        googleMap = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 25.04, lng: 121.50 },
          zoom: 12
        });
		mapIsReady = true;
		googleAPIHandler();
      }

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initSheet);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initSheet() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;

		  sheetIsReady = true;
		  googleAPIHandler();
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

	  function collectGeoPoints() {
		//collect geo points from spreadsheet
		gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: model.sheetID,
          range: model.sheetRange,
        }).then(function(response) {
          var range = response.result;
          if (range.values && range.values.length > 0) {
            geoPoints = range.values.map(function(entry) {
				return {
					lat: parseFloat(entry[0]),
					lng: parseFloat(entry[1])
				}
			});
			visualizeGeoPointsOnMap();
          } else {
            console.log('no data found');
          }
        }, function(response) {
          console.log('Error: ' + response.result.error.message);
        });
	  }
	  function isNumber(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	  }

	  function visualizeGeoPointsOnMap() {
		  if(googleMap)
			geoPoints.forEach(function(geoPoint) {
				if(isNumber(geoPoint.lat) && isNumber(geoPoint.lng)) {
					var marker = new google.maps.Marker({
						position: geoPoint,
						map: googleMap
					});
				}
				else {
					console.log('not a valid point');
				}
			});
	  }

	  function googleAPIHandler() {
		  if(mapIsReady && sheetIsReady) {
			  collectGeoPoints();
		  }
	  }

    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=[[=model.mapAPIKey]]&callback=initMap"
    async defer></script>
#]]
 